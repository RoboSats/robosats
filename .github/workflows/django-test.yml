name: "Test: Coordinator"

on:
  workflow_dispatch:
  workflow_call:
  push:
    branches: [ "main" ]
    paths: ["api", "chat", "control", "robosats"]
  pull_request_target:
    branches: [ "main" ]
    paths: ["api", "chat", "control", "robosats"]

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ["3.11.6", "3.12"]
        lnd-version: ["v0.17.0-beta","v0.17.1-beta.rc1"]

    steps:
    - name: 'Checkout'
      uses: actions/checkout@v4

    - name: 'Compose Eegtest Orchestration'
      uses: isbang/compose-action@v1.5.1
      with:
        compose-file: "docker-test.yml"
        env: "tests/compose.env"

    # - name: 'Set up Python ${{ matrix.python-version }}'
    #   uses: actions/setup-python@v4
    #   with:
    #     python-version: ${{ matrix.python-version }}

    # - name: 'Cache pip dependencies'
    #   uses: actions/cache@v3
    #   with:
    #     path: ~/.cache/pip
    #     key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    #     restore-keys: |
    #       ${{ runner.os }}-pip-

    # - name: 'Install Python Dependencies'
    #   run: |
    #     python -m pip install --upgrade pip
    #     pip install -r requirements.txt
    #     pip install -r requirements_dev.txt

    # - name: 'Install LND/CLN gRPC Dependencies'
    #   run: bash ./scripts/generate_grpc.sh

    # - name: 'Create .env File'
    #   run: |
    #     mv .env-sample .env
    #     sed -i "s/USE_TOR=True/USE_TOR=False/" .env

    # - name: 'Wait for PostgreSQL to become ready'
    #   run: |
    #     sudo apt-get install -y postgresql-client
    #     until pg_isready -h localhost -p 5432 -U postgres; do sleep 2; done

    - name: 'Run tests with coverage'
      run: |
        docker exec coordinator coverage run manage.py test
        docker exec coordinator coverage report


# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - name: Run Docker Compose
#         run: |
#           docker-compose up -d
#           docker-compose run web python manage.py test